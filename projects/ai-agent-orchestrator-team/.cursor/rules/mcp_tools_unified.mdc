---
description: AI Agent Orchestrator MCP 툴 사용 필수 규칙
alwaysApply: true
---

# MCP 툴 사용 필수 규칙

## 🔴 규칙 #1: 항상 conversation_log 호출

**모든 응답 종료 시 반드시 `mcp_ai-agent-orchestrator_conversation_log` 호출**

예외 없음. 간단한 질문이든 복잡한 작업이든 항상 호출.

---

## 🔴 규칙 #2: meta는 문자열

**가장 흔한 오류입니다. 주의하세요!**

```python
# ❌ 잘못 - "Input should be a valid string" 오류 발생
{
  "meta": {"source": "cursor"}
}

# ❌ 잘못 - topic 추가해도 마찬가지
{
  "meta": {"source": "cursor", "topic": "backoffice"}
}

# ✅ 올바름 - meta는 문자열이어야 함
{
  "meta": "{\"source\":\"cursor\"}"
}

# ✅ 올바름 - topic 포함
{
  "meta": "{\"source\":\"cursor\",\"topic\":\"backoffice\"}"
}
```

**핵심: JSON 객체를 따옴표로 감싸고 내부 따옴표는 `\"`로 이스케이프**

---

## 📋 conversation_log 호출 방법

**툴명:** `mcp_ai-agent-orchestrator_conversation_log`

**파라미터 (모두 문자열):**

1. **channel** - 세션 ID
   - 형식: `"cursor_session_YYYYMMDD_HHMM"`
   - 현재 날짜/시각 사용
   - 예: `"cursor_session_20251002_1630"`

2. **messages** - 대화 내역 JSON 문자열
   - 형식: `"[{\"role\":\"user\",\"text\":\"...\",\"timestamp\":\"...\"}]"`
   - 내부 따옴표는 `\"`로 이스케이프
   - ISO 8601 타임스탬프 사용

3. **meta** - 메타데이터 JSON 문자열 (⚠️ 객체 아님!)
   - 형식: `"{\"source\":\"cursor\"}"`
   - topic 추가: `"{\"source\":\"cursor\",\"topic\":\"discussion\"}"`
   - 항상 내부 따옴표를 `\"`로 이스케이프

---

## ✅ 올바른 예시

```python
{
  "channel": "cursor_session_20251002_1630",
  "messages": "[{\"role\":\"user\",\"text\":\"프로젝트 설명해줘\",\"timestamp\":\"2025-10-02T16:30:00Z\"},{\"role\":\"assistant\",\"text\":\"이 프로젝트는...\",\"timestamp\":\"2025-10-02T16:30:15Z\"}]",
  "meta": "{\"source\":\"cursor\"}"
}
```

**topic 포함:**
```python
{
  "channel": "cursor_session_20251002_1630",
  "messages": "[{\"role\":\"user\",\"text\":\"백오피스 작업?\",\"timestamp\":\"2025-10-02T16:30:00Z\"}]",
  "meta": "{\"source\":\"cursor\",\"topic\":\"backoffice\"}"
}
```

---

## 📋 extract 호출 방법 (필요 시)

**툴명:** `mcp_ai-agent-orchestrator_extract`

**파라미터 (모두 문자열):**

1. **query** - 검색 쿼리 JSON 문자열
   - 형식: `"{\"text\":\"검색어\",\"limit\":20}"`
   - 항상 문자열, 객체 아님

2. **channel** - 검색 범위
   - 전체 검색: `""`
   - 특정 세션: 세션 ID

**예시:**
```python
{
  "query": "{\"text\":\"백오피스\",\"limit\":20}",
  "channel": ""
}
```

---

## 🚫 자주하는 실수

### 실수 #1: meta를 객체로 전달
```python
# ❌ 잘못
"meta": {"source": "cursor"}

# ✅ 올바름
"meta": "{\"source\":\"cursor\"}"
```

### 실수 #2: 백틱 사용
```python
# ❌ 잘못
`meta`: `{\"source\":\"cursor\"}`

# ✅ 올바름
"meta": "{\"source\":\"cursor\"}"
```

### 실수 #3: 이중 이스케이프
```python
# ❌ 잘못
"meta": "{\\\"source\\\":\\\"cursor\\\"}"

# ✅ 올바름
"meta": "{\"source\":\"cursor\"}"
```

---

## 📝 응답 패턴

**모든 응답에서 이 패턴을 따르세요:**

1. 사용자 질문에 답변
2. `conversation_log` 툴 호출 (올바른 파라미터로)
3. 완료

**기억하세요:**
- meta는 문자열 (객체 아님)
- 이스케이프 한 번만: `\"`
- 백틱 금지, 큰따옴표 사용: `"`

---

## 🔍 빠른 체크리스트

툴 호출 전 확인:

- [ ] meta가 문자열? `"{\"source\":\"cursor\"}"`
- [ ] 객체 아님? `{"source": "cursor"}` ← 잘못!
- [ ] 큰따옴표 사용? (백틱 아님)
- [ ] 한 번만 이스케이프? (이중 아님)

---

## 💡 기억하세요

**meta 파라미터 형식:**
- 기본: `"{\"source\":\"cursor\"}"`
- topic 포함: `"{\"source\":\"cursor\",\"topic\":\"your_topic\"}"`

**항상 전체 JSON을 따옴표로 감싸고 내부 따옴표를 이스케이프하세요!**
